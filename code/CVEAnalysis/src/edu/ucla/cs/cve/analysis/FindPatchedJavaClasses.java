package edu.ucla.cs.cve.analysis;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;

import org.eclipse.jdt.core.dom.CompilationUnit;

public class FindPatchedJavaClasses {
	public static void main(String[] args) throws IOException {
		String rootPath = "/home/troy/ONR/CVE-Java-patches";
		File rootDir = new File(rootPath);
		HashMap<String, HashSet<String>> libToCVE = new HashMap<String, HashSet<String>>();
		HashMap<String, HashSet<String>> libToCls = new HashMap<String, HashSet<String>>();
		for(File f : rootDir.listFiles()) {
			String id = f.getName();
//			System.out.println("===" + id + "===");
			for(File javaFile : f.listFiles()) {
				CompilationUnit cu = ASTUtils.parse(javaFile);
				if(cu != null) {
					MyASTVisitor visitor = new MyASTVisitor();
					cu.accept(visitor);
					if(visitor.pkgName != null) {
						String[] ss = visitor.pkgName.split("\\.");
						String lib;
						if(visitor.pkgName.startsWith("hudson") || visitor.pkgName.startsWith("bsh") || visitor.pkgName.startsWith("jenkins")) {
							lib = ss[0];
						} else if (visitor.pkgName.startsWith("org.apache")){
							lib = ss[0] + "." + ss[1] + "." + ss[2];
						} else {
							lib = ss[0] + "." + ss[1];
						}
						
						HashSet<String> cves;
						if(libToCVE.containsKey(lib)) {
							cves = libToCVE.get(lib);
						} else {
							cves = new HashSet<String>();
						}
						cves.add(id);
						libToCVE.put(lib, cves);
						
						for(String cls : visitor.classNames) {
//							System.out.println(visitor.pkgName + "." + cls);
							String fullName = visitor.pkgName + "." + cls;
							HashSet<String> clss;
							if(libToCls.containsKey(lib)) {
								clss = libToCls.get(lib);
							} else {
								clss = new HashSet<String>();
							}
							clss.add(fullName);
							libToCls.put(lib, clss);
						}
					}
				}
			}
		}
		
		for(String lib : libToCVE.keySet()) {
			HashSet<String> cves = libToCVE.get(lib);
			HashSet<String> clss = libToCls.get(lib);
			System.out.println(lib + "\t" + cves.size() + "\t" + clss.size() + "\t" + cves.toString());
		}
	}
}
