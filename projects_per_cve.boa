# See how many projects mention the same CVEs in its commit logs. Only filter with 'cve-20'
p: Project = input;
#count: output sum of int;

#data: output collection of string;

top_fixed_cves: output top(10000) of string weight int;

# Explores all the commit logs of one particular project
mentionsCVE := function(node: Project){
    
    mentionedCVEs_set : set of string;
    mentionedCVEs_map : map[int] of string;
    num_CVEs := 0;
    
    foreach (i: int; def(node.code_repositories[i]))
        {
      foreach (j: int; def(node.code_repositories[i].revisions[j]))
        {
            lowercase_log := lowercase(node.code_repositories[i].revisions[j].log);
            strip_newline := strreplace(lowercase_log, "\n", " ", true);
            strip_open_bracket := strreplace(strip_newline, "[", "", true);
            strip_close_bracket := strreplace(strip_open_bracket, "]", "", true);
            final_log := strip_close_bracket;
            
    	    if(match(`cve-20`, final_log)){

# Grab the CVE ID
                log_array := splitall(final_log, "[ ,<>()/.:_;#!?]");
                foreach(k: int; def(log_array[k])){
                    if(match(`cve-20`, lowercase(log_array[k]))){
                        if(! contains(mentionedCVEs_set, log_array[k])){
                            add(mentionedCVEs_set, log_array[k]);
                            mentionedCVEs_map[num_CVEs] = log_array[k];
                            num_CVEs = num_CVEs + 1;
                        }

                    }
                }
                #return true;



    	    }
    	}
    }
    #return false;
    
    foreach(i:int; def(mentionedCVEs_map[i])){
        top_fixed_cves << mentionedCVEs_map[i] weight 1;
    }
    
};


visit(p, visitor {
	before node: Project -> 
	{
	    ifall (i: int; !match(`^java$`, lowercase(node.programming_languages[i]))) stop;
	    mentionsCVE(node);
	}
});